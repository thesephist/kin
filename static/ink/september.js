__ink_ident_new = () => (() => { let self; return self = {i: __ink_negate(1), next: () => (() => { (() => {let __ink_assgn_trgt = __as_ink_string(self); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); return (() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()} })()

std = load(__Ink_String(`../vendor/std`));
log = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[log] || null : (__ink_acc_trgt.log !== undefined ? __ink_acc_trgt.log : null)})();
f = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[format] || null : (__ink_acc_trgt.format !== undefined ? __ink_acc_trgt.format : null)})();
slice = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[slice] || null : (__ink_acc_trgt.slice !== undefined ? __ink_acc_trgt.slice : null)})();
map = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[map] || null : (__ink_acc_trgt.map !== undefined ? __ink_acc_trgt.map : null)})();
reduce = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[reduce] || null : (__ink_acc_trgt.reduce !== undefined ? __ink_acc_trgt.reduce : null)})();
every = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[every] || null : (__ink_acc_trgt.every !== undefined ? __ink_acc_trgt.every : null)})();
str = load(__Ink_String(`../vendor/str`));
digit__ink_qm__ = (() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[digit__ink_qm__] || null : (__ink_acc_trgt.digit__ink_qm__ !== undefined ? __ink_acc_trgt.digit__ink_qm__ : null)})();
hasPrefix__ink_qm__ = (() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[hasPrefix__ink_qm__] || null : (__ink_acc_trgt.hasPrefix__ink_qm__ !== undefined ? __ink_acc_trgt.hasPrefix__ink_qm__ : null)})();
index = (() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[index] || null : (__ink_acc_trgt.index !== undefined ? __ink_acc_trgt.index : null)})();
mkiota = (() => {let __ink_acc_trgt = __as_ink_string(load(__Ink_String(`iota`))); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[__ink_ident_new] || null : (__ink_acc_trgt.__ink_ident_new !== undefined ? __ink_acc_trgt.__ink_ident_new : null)})();
Newline = char(10);
Tab = char(9);
iota = (() => {let __ink_acc_trgt = __as_ink_string(mkiota()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[next] || null : (__ink_acc_trgt.next !== undefined ? __ink_acc_trgt.next : null)})();
Tok = {Separator: iota(), Comment: iota(), Ident: iota(), EmptyIdent: iota(), NumberLiteral: iota(), StringLiteral: iota(), TrueLiteral: iota(), FalseLiteral: iota(), AccessorOp: iota(), EqOp: iota(), FunctionArrow: iota(), KeyValueSeparator: iota(), DefineOp: iota(), MatchColon: iota(), CaseArrow: iota(), SubOp: iota(), NegOp: iota(), AddOp: iota(), MulOp: iota(), DivOp: iota(), ModOp: iota(), GtOp: iota(), LtOp: iota(), AndOp: iota(), OrOp: iota(), XorOp: iota(), LParen: iota(), RParen: iota(), LBracket: iota(), RBracket: iota(), LBrace: iota(), RBrace: iota()};
typeName = type => reduce(keys(Tok), (acc, k) => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return k })()] || null : (__ink_acc_trgt[(() => { return k })()] !== undefined ? __ink_acc_trgt[(() => { return k })()] : null)})(), [[() => (type), () => (k)], [() => (__Ink_Empty), () => (acc)]]), __Ink_String(`(unknown token)`));
tkString = tok => f(__Ink_String(`{{ 0 }}({{ 1 }}) @ {{2}}:{{3}}`), [typeName((() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})()), (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})()]);
token = (type, val, line, col, i) => ({type: type, val: val, line: line, col: col, i: i});
tokenizeWithOpt = (s, lexComments) => (() => { let S; let commit; let commitChar; let commitClear; let ensureSeparator; let finalize; let simpleCommit; let simpleCommitChar; let tokens; S = {i: __ink_negate(1), buf: __Ink_String(``), strbuf: __Ink_String(``), strbufLine: 0, strbufCol: 0, lastType: (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Separator] || null : (__ink_acc_trgt.Separator !== undefined ? __ink_acc_trgt.Separator : null)})(), line: 1, col: 0, inStringLiteral: false}; tokens = []; simpleCommit = tok => (() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(lastType, (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})()) : (__ink_assgn_trgt.lastType) = (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(); return __ink_assgn_trgt})(); return (() => {let __ink_assgn_trgt = __as_ink_string(tokens); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(tokens), tok) : (__ink_assgn_trgt[len(tokens)]) = tok; return __ink_assgn_trgt})() })(); simpleCommitChar = type => simpleCommit(token(type, null, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})(), __ink_match(type, [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[TrueLiteral] || null : (__ink_acc_trgt.TrueLiteral !== undefined ? __ink_acc_trgt.TrueLiteral : null)})()), () => (((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - 4))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FalseLiteral] || null : (__ink_acc_trgt.FalseLiteral !== undefined ? __ink_acc_trgt.FalseLiteral : null)})()), () => (((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - 5))], [() => (__Ink_Empty), () => (((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - 1))]]))); commitClear = () => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})(), [[() => (__Ink_String(``)), () => (__Ink_Empty)], [() => (__Ink_Empty), () => ((() => { let cbuf; cbuf = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(buf, __Ink_String(``)) : (__ink_assgn_trgt.buf) = __Ink_String(``); return __ink_assgn_trgt})(); return __ink_match(cbuf, [[() => (__Ink_String(`true`)), () => (simpleCommitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[TrueLiteral] || null : (__ink_acc_trgt.TrueLiteral !== undefined ? __ink_acc_trgt.TrueLiteral : null)})()))], [() => (__Ink_String(`false`)), () => (simpleCommitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FalseLiteral] || null : (__ink_acc_trgt.FalseLiteral !== undefined ? __ink_acc_trgt.FalseLiteral : null)})()))], [() => (__Ink_Empty), () => (__ink_match(digit__ink_qm__(cbuf), [[() => (true), () => (simpleCommit(token((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NumberLiteral] || null : (__ink_acc_trgt.NumberLiteral !== undefined ? __ink_acc_trgt.NumberLiteral : null)})(), number(cbuf), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(), ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() - len(cbuf)), ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - len(cbuf)))))], [() => (false), () => (simpleCommit(token((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), cbuf, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(), ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() - len(cbuf)), ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - len(cbuf)))))]]))]]) })())]]); commit = tok => (() => { commitClear(); return simpleCommit(tok) })(); commitChar = type => commit(token(type, null, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})())); ensureSeparator = () => (() => { commitClear(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[lastType] || null : (__ink_acc_trgt.lastType !== undefined ? __ink_acc_trgt.lastType : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Separator] || null : (__ink_acc_trgt.Separator !== undefined ? __ink_acc_trgt.Separator : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LParen] || null : (__ink_acc_trgt.LParen !== undefined ? __ink_acc_trgt.LParen : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LBracket] || null : (__ink_acc_trgt.LBracket !== undefined ? __ink_acc_trgt.LBracket : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LBrace] || null : (__ink_acc_trgt.LBrace !== undefined ? __ink_acc_trgt.LBrace : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AddOp] || null : (__ink_acc_trgt.AddOp !== undefined ? __ink_acc_trgt.AddOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[SubOp] || null : (__ink_acc_trgt.SubOp !== undefined ? __ink_acc_trgt.SubOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MulOp] || null : (__ink_acc_trgt.MulOp !== undefined ? __ink_acc_trgt.MulOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DivOp] || null : (__ink_acc_trgt.DivOp !== undefined ? __ink_acc_trgt.DivOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ModOp] || null : (__ink_acc_trgt.ModOp !== undefined ? __ink_acc_trgt.ModOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NegOp] || null : (__ink_acc_trgt.NegOp !== undefined ? __ink_acc_trgt.NegOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[GtOp] || null : (__ink_acc_trgt.GtOp !== undefined ? __ink_acc_trgt.GtOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LtOp] || null : (__ink_acc_trgt.LtOp !== undefined ? __ink_acc_trgt.LtOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EqOp] || null : (__ink_acc_trgt.EqOp !== undefined ? __ink_acc_trgt.EqOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DefineOp] || null : (__ink_acc_trgt.DefineOp !== undefined ? __ink_acc_trgt.DefineOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AccessorOp] || null : (__ink_acc_trgt.AccessorOp !== undefined ? __ink_acc_trgt.AccessorOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[KeyValueSeparator] || null : (__ink_acc_trgt.KeyValueSeparator !== undefined ? __ink_acc_trgt.KeyValueSeparator : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FunctionArrow] || null : (__ink_acc_trgt.FunctionArrow !== undefined ? __ink_acc_trgt.FunctionArrow : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchColon] || null : (__ink_acc_trgt.MatchColon !== undefined ? __ink_acc_trgt.MatchColon : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[CaseArrow] || null : (__ink_acc_trgt.CaseArrow !== undefined ? __ink_acc_trgt.CaseArrow : null)})()), () => (null)], [() => (__Ink_Empty), () => (commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Separator] || null : (__ink_acc_trgt.Separator !== undefined ? __ink_acc_trgt.Separator : null)})()))]]) })(); finalize = () => (() => { ensureSeparator(); return tokens })(); __ink_match(hasPrefix__ink_qm__(s, __Ink_String(`#!`)), [[() => (true), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, index(s, Newline)) : (__ink_assgn_trgt.i) = index(s, Newline); return __ink_assgn_trgt})(); return (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1)) : (__ink_assgn_trgt.line) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1); return __ink_assgn_trgt})() })())]]); return (() => { let __ink_trampolined_sub; let sub; return sub = () => (() => { __ink_trampolined_sub = () => (() => { let advance; let c; (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1)) : (__ink_assgn_trgt.col) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1); return __ink_assgn_trgt})(); c = (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] : null)})(); return __ink_match([c, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[inStringLiteral] || null : (__ink_acc_trgt.inStringLiteral !== undefined ? __ink_acc_trgt.inStringLiteral : null)})()], [[() => ([null, __Ink_Empty]), () => (finalize())], [() => ([__Ink_String(`'`), __Ink_Empty]), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[inStringLiteral] || null : (__ink_acc_trgt.inStringLiteral !== undefined ? __ink_acc_trgt.inStringLiteral : null)})(), [[() => (true), () => ((() => { commit(token((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[StringLiteral] || null : (__ink_acc_trgt.StringLiteral !== undefined ? __ink_acc_trgt.StringLiteral : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbufLine] || null : (__ink_acc_trgt.strbufLine !== undefined ? __ink_acc_trgt.strbufLine : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbufCol] || null : (__ink_acc_trgt.strbufCol !== undefined ? __ink_acc_trgt.strbufCol : null)})(), (((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - len((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})())) - 1))); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(inStringLiteral, false) : (__ink_assgn_trgt.inStringLiteral) = false; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (false), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(strbuf, __Ink_String(``)) : (__ink_assgn_trgt.strbuf) = __Ink_String(``); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(strbufLine, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})()) : (__ink_assgn_trgt.strbufLine) = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(strbufCol, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})()) : (__ink_assgn_trgt.strbufCol) = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(inStringLiteral, true) : (__ink_assgn_trgt.inStringLiteral) = true; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => ([__Ink_Empty, true]), () => (__ink_match(c, [[() => (Newline), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1)) : (__ink_assgn_trgt.line) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, 0) : (__ink_assgn_trgt.col) = 0; return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(strbuf, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})() + c)) : (__ink_assgn_trgt.strbuf) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})() + c); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`\\`)), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(strbuf, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})() + (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] : null)})())) : (__ink_assgn_trgt.strbuf) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})() + (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] : null)})()); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1)) : (__ink_assgn_trgt.col) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_Empty), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(strbuf, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})() + c)) : (__ink_assgn_trgt.strbuf) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})() + c); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => (__Ink_Empty), () => (__ink_match(c, [[() => (__Ink_String(`\``)), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] : null)})(), [[() => (__Ink_String(`\``)), () => (__ink_match(advance = index(slice(s, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})(), len(s)), Newline), [[() => (__ink_negate(1)), () => ((() => { __ink_match(lexComments, [[() => (true), () => (commit(token((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Comment] || null : (__ink_acc_trgt.Comment !== undefined ? __ink_acc_trgt.Comment : null)})(), slice(s, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})(), len(s)), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})())))]]); return finalize() })())], [() => (__Ink_Empty), () => ((() => { let col; let i; let line; line = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(); col = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})(); i = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + advance)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + advance); return __ink_assgn_trgt})(); __ink_match(lexComments, [[() => (true), () => (commit(token((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Comment] || null : (__ink_acc_trgt.Comment !== undefined ? __ink_acc_trgt.Comment : null)})(), slice(s, i, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})()), line, col, i)))]]); ensureSeparator(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1)) : (__ink_assgn_trgt.line) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, 0) : (__ink_assgn_trgt.col) = 0; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => (__Ink_Empty), () => ((() => { let col; let i; let line; line = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(); col = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})(); i = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); (() => { let __ink_trampolined_sub; let sub; return sub = () => (() => { __ink_trampolined_sub = () => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] : null)})(), [[() => (__Ink_String(`\``)), () => ((() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1)) : (__ink_assgn_trgt.col) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1); return __ink_assgn_trgt})())], [() => (Newline), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1)) : (__ink_assgn_trgt.line) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, 0) : (__ink_assgn_trgt.col) = 0; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (null), () => (null)], [() => (__Ink_Empty), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1)) : (__ink_assgn_trgt.col) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())]]); return __ink_resolve_trampoline(__ink_trampolined_sub) })() })()(); __ink_match(lexComments, [[() => (true), () => (commit(token((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Comment] || null : (__ink_acc_trgt.Comment !== undefined ? __ink_acc_trgt.Comment : null)})(), slice(s, i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)), line, col, i)))]]); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => (Newline), () => ((() => { ensureSeparator(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1)) : (__ink_assgn_trgt.line) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, 0) : (__ink_assgn_trgt.col) = 0; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (Tab), () => ((() => { commitClear(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(` `)), () => ((() => { commitClear(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`_`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EmptyIdent] || null : (__ink_acc_trgt.EmptyIdent !== undefined ? __ink_acc_trgt.EmptyIdent : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`~`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NegOp] || null : (__ink_acc_trgt.NegOp !== undefined ? __ink_acc_trgt.NegOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`+`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AddOp] || null : (__ink_acc_trgt.AddOp !== undefined ? __ink_acc_trgt.AddOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`*`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MulOp] || null : (__ink_acc_trgt.MulOp !== undefined ? __ink_acc_trgt.MulOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`/`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DivOp] || null : (__ink_acc_trgt.DivOp !== undefined ? __ink_acc_trgt.DivOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`%`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ModOp] || null : (__ink_acc_trgt.ModOp !== undefined ? __ink_acc_trgt.ModOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`&`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AndOp] || null : (__ink_acc_trgt.AndOp !== undefined ? __ink_acc_trgt.AndOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`|`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[OrOp] || null : (__ink_acc_trgt.OrOp !== undefined ? __ink_acc_trgt.OrOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`^`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[XorOp] || null : (__ink_acc_trgt.XorOp !== undefined ? __ink_acc_trgt.XorOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`<`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LtOp] || null : (__ink_acc_trgt.LtOp !== undefined ? __ink_acc_trgt.LtOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`>`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[GtOp] || null : (__ink_acc_trgt.GtOp !== undefined ? __ink_acc_trgt.GtOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`,`)), () => ((() => { ensureSeparator(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`.`)), () => (__ink_match([(() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})(), every(map((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})(), digit__ink_qm__))], [[() => ([__Ink_String(``), __Ink_Empty]), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AccessorOp] || null : (__ink_acc_trgt.AccessorOp !== undefined ? __ink_acc_trgt.AccessorOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => ([__Ink_Empty, true]), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(buf, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})() + __Ink_String(`.`))) : (__ink_assgn_trgt.buf) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})() + __Ink_String(`.`)); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_Empty), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AccessorOp] || null : (__ink_acc_trgt.AccessorOp !== undefined ? __ink_acc_trgt.AccessorOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => (__Ink_String(`:`)), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] : null)})(), [[() => (__Ink_String(`=`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DefineOp] || null : (__ink_acc_trgt.DefineOp !== undefined ? __ink_acc_trgt.DefineOp : null)})()); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`:`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchColon] || null : (__ink_acc_trgt.MatchColon !== undefined ? __ink_acc_trgt.MatchColon : null)})()); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_Empty), () => ((() => { ensureSeparator(); commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[KeyValueSeparator] || null : (__ink_acc_trgt.KeyValueSeparator !== undefined ? __ink_acc_trgt.KeyValueSeparator : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => (__Ink_String(`=`)), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] : null)})(), [[() => (__Ink_String(`>`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FunctionArrow] || null : (__ink_acc_trgt.FunctionArrow !== undefined ? __ink_acc_trgt.FunctionArrow : null)})()); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_Empty), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EqOp] || null : (__ink_acc_trgt.EqOp !== undefined ? __ink_acc_trgt.EqOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => (__Ink_String(`-`)), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] : null)})(), [[() => (__Ink_String(`>`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[CaseArrow] || null : (__ink_acc_trgt.CaseArrow !== undefined ? __ink_acc_trgt.CaseArrow : null)})()); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_Empty), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[SubOp] || null : (__ink_acc_trgt.SubOp !== undefined ? __ink_acc_trgt.SubOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => (__Ink_String(`(`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LParen] || null : (__ink_acc_trgt.LParen !== undefined ? __ink_acc_trgt.LParen : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`)`)), () => ((() => { ensureSeparator(); commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RParen] || null : (__ink_acc_trgt.RParen !== undefined ? __ink_acc_trgt.RParen : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`[`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LBracket] || null : (__ink_acc_trgt.LBracket !== undefined ? __ink_acc_trgt.LBracket : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`]`)), () => ((() => { ensureSeparator(); commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RBracket] || null : (__ink_acc_trgt.RBracket !== undefined ? __ink_acc_trgt.RBracket : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`{`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LBrace] || null : (__ink_acc_trgt.LBrace !== undefined ? __ink_acc_trgt.LBrace : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`}`)), () => ((() => { ensureSeparator(); commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RBrace] || null : (__ink_acc_trgt.RBrace !== undefined ? __ink_acc_trgt.RBrace : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_Empty), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(buf, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})() + c)) : (__ink_assgn_trgt.buf) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})() + c); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())]]))]]) })(); return __ink_resolve_trampoline(__ink_trampolined_sub) })() })()() })();
tokenize = s => tokenizeWithOpt(s, false);
tokenizeWithComments = s => tokenizeWithOpt(s, true)

